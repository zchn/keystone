.. _LaunchQEMU:

Run Tests
--------------------------------------

Now, you're ready to use QEMU to boot Keystone Security Monitor and Linux on top of it.

Simply running following command will build and run tests in QEMU.

::

  source source.sh
  cd <build directory>
  make run-tests

If you wish to compile and run tests by your self, follow the following instructions.

Build Test Binaries
#############################

Keystone tests leverage packages built as part of Keysonte SDK's examples.
You can build the tests by executing ``make tests``.
Note that ``KEYSTONE_SDK_DIR`` must be set to the install path of the SDK.

::

  make tests

This command will build a few enclave packages named ``*.ke`` in the ``<build directory>/example`` directory.

Next, you need to copy the enclave packages into the disk image that you're going to boot on.
We use `Buildroot Overlay <https://buildroot.org/downloads/manual/manual.html#rootfs-custom>`_ for injecting the test binaries into the disk image.
The buildroot overlay directory is ``<build directory>/overlay``.

We need to copy the packages into the ``<build directory>/overlay`` directory and re-generate the QEMU image:

::

   find ./examples/ -name '*.ke' -exec cp \{\} ./overlay/root/ \;

The ``attestor.ke`` example requires the Security Monitor binary also located under ``/root``, so let's copy the Security Monitor binary as well:

::

   cp sm.build/platform/generic/firmware/fw_payload.bin overlay/root/


Build Disk Image
#############################

Now it's time to re-generate the QEMU image:

::

  # in your <build directory>
  make image

Launch QEMU
#############################

The following script will run QEMU, start executing from the emulated silicon root of trust.
The root of trust then jumps to the SM, and the SM boots Linux!

::

  # in your <build directory>
   ./scripts/run-qemu.sh

Login as ``root`` with the password ``sifive``.


You can exit QEMU by ``ctrl-a``+``x`` or using ``poweroff`` command

Note that the launch scripts for QEMU will start ssh on a random
forwarded localhost port (this is to allow multiple qemu test runs on
the same development machine). The script will print what port it has
forwarded ssh to on start.

Insert Keystone Driver
##################################

Insert the keystone driver.

::

  insmod keystone-driver.ko

Run Tests
##################################

You can run the test enclaves by using a self-extracting keystone archive called `tests.ke` generated by the SDK.

::

  ./tests.ke

In order to extract the package without execution, run

::

  ./tests.ke --noexec --target <dst>

Run ``./tests.ke --help`` for more information.

You can run other examples such as ``attestor.ke`` as well. See :doc:`Tutorials<Tutorials/index>` for a list of tutorials related to these examples.
